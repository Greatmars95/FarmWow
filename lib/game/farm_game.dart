// lib/game/farm_game.dart
import 'package:flame/components.dart';
import 'package:flame/events.dart';
import 'package:flame/game.dart';
import 'package:flutter/material.dart';
import '../components/farm_tile.dart';

class FarmGame extends FlameGame with HasKeyboardHandlerComponents, HasCollisionDetection {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  static const int rows = 8;
  static const int columns = 8;
  static const double tileSize = 64.0;
  
  // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  late TextComponent infoText;
  late TextComponent instructionsText;

  @override
  Future<void> onLoad() async {
    // ===== –§–û–ù =====
    add(RectangleComponent(
      position: Vector2.zero(),
      size: Vector2(columns * tileSize, rows * tileSize + 120), // +120 –¥–ª—è UI
      paint: Paint()..color = Colors.green.shade100,
    ));

    // ===== –°–ï–¢–ö–ê –ò–ì–†–û–í–´–• –¢–ê–ô–õ–û–í =====
    for (int row = 0; row < rows; row++) {
      for (int col = 0; col < columns; col++) {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–ª
        final farmTile = FarmTile(gridX: col, gridY: row);
        add(farmTile);

        // –†–∞–º–∫–∞ —Ç–∞–π–ª–∞
        final border = RectangleComponent(
          position: Vector2(col * tileSize, row * tileSize),
          size: Vector2.all(tileSize),
          paint: Paint()
            ..color = Colors.black26
            ..style = PaintingStyle.stroke
            ..strokeWidth = 1.0,
        );
        add(border);
      }
    }

    // ===== UI –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructionsText = TextComponent(
      text: '''üå± –§–ï–†–ú–ê-–°–ò–ú–£–õ–Ø–¢–û–† üå±
1. –ù–∞–∂–º–∏ –Ω–∞ —Ç—Ä–∞–≤—É ‚Üí –≥—Ä—è–¥–∫–∞
2. –ù–∞–∂–º–∏ –Ω–∞ –≥—Ä—è–¥–∫—É ‚Üí –ø–æ—Å–∞–¥–∏ –ø—à–µ–Ω–∏—Ü—É  
3. –ö—Ä–∞—Å–Ω—ã–π —Ç–∞–π–ª = –Ω—É–∂–µ–Ω –ø–æ–ª–∏–≤
4. –ñ–µ–ª—Ç—ã–π = —É—Ä–æ–∂–∞–π –≥–æ—Ç–æ–≤!''',
      position: Vector2(10, rows * tileSize + 10),
      textRenderer: TextPaint(
        style: const TextStyle(
          color: Colors.black87,
          fontSize: 12,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
    add(instructionsText);

    // –ò–≥—Ä–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    infoText = TextComponent(
      text: '–ö–ª–∏–∫–∞–π –ø–æ —Ç–∞–π–ª–∞–º —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–æ! üöú',
      position: Vector2(10, rows * tileSize + 90),
      textRenderer: TextPaint(
        style: const TextStyle(
          color: Colors.green,
          fontSize: 14,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
    add(infoText);
    
    print('üåæ –§–µ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –¢–∞–π–ª–æ–≤: ${rows * columns}');
    print('üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –∏–ª–∏ —Ç–∞–ø –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–π–ª–∞–º–∏');
  }

  @override
  void update(double dt) {
    super.update(dt);
    _updateUI();
  }

  void _updateUI() {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    int grassTiles = 0;
    int tilledTiles = 0;
    int plantedTiles = 0;
    int grownTiles = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º FarmTile –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    for (final component in children) {
      if (component is FarmTile) {
        switch (component.stateString) {
          case 'grass':
            grassTiles++;
            break;
          case 'tilled':
            tilledTiles++;
            break;
          case 'planted':
          case 'watered':
            plantedTiles++;
            break;
          case 'grown':
            grownTiles++;
            break;
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    infoText.text = '''üå± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–º—ã:
üü¢ –¢—Ä–∞–≤–∞: $grassTiles  üü§ –ì—Ä—è–¥–∫–∏: $tilledTiles  üåæ –†–∞—Å—Ç–µ—Ç: $plantedTiles  ‚≠ê –ì–æ—Ç–æ–≤–æ: $grownTiles''';
  }
}

/*
üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨:

1. –°–û–ó–î–ê–ù–ò–ï –ì–†–Ø–î–ö–ò:
   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π —Ç–∞–π–ª (—Ç—Ä–∞–≤–∞)
   - –û–Ω —Å—Ç–∞–Ω–µ—Ç –∫–æ—Ä–∏—á–Ω–µ–≤—ã–º (–≥—Ä—è–¥–∫–∞ –≥–æ—Ç–æ–≤–∞)

2. –ü–û–°–ê–î–ö–ê:
   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ—Ä–∏—á–Ω–µ–≤—É—é –≥—Ä—è–¥–∫—É
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–∞–¥–∏—Ç—Å—è –ø—à–µ–Ω–∏—Ü–∞
   - –¢–∞–π–ª —Å—Ç–∞–Ω–µ—Ç —Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–º

3. –ü–û–õ–ò–í:
   - –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–ª —Å—Ç–∞–Ω–µ—Ç –∫—Ä–∞—Å–Ω—ã–º = –Ω—É–∂–µ–Ω –ø–æ–ª–∏–≤
   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Ç–∞–π–ª —á—Ç–æ–±—ã –ø–æ–ª–∏—Ç—å
   - –û–Ω —Å—Ç–∞–Ω–µ—Ç —Å–∏–Ω–∏–º = –ø–æ–ª–∏—Ç–æ (—Ä–∞—Å—Ç–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)

4. –°–ë–û–† –£–†–û–ñ–ê–Ø:
   - –ö–æ–≥–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤—ã—Ä–∞—Å—Ç–µ—Ç, —Ç–∞–π–ª —Å—Ç–∞–Ω–µ—Ç –∂–µ–ª—Ç—ã–º
   - –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
   - –¢–∞–π–ª –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —Ç—Ä–∞–≤–µ

‚è±Ô∏è –í–†–ï–ú–Ø –†–û–°–¢–ê:
   - –ü—à–µ–Ω–∏—Ü–∞: 10 —Å–µ–∫—É–Ω–¥ (–±–µ–∑ –ø–æ–ª–∏–≤–∞) / 5 —Å–µ–∫—É–Ω–¥ (—Å –ø–æ–ª–∏–≤–æ–º)
   
üéØ –¶–ï–õ–¨:
   –ü—Ä–æ—Å—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ñ–µ—Ä–º–æ–π! –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
*/